import { MDXRemote } from 'next-mdx-remote/rsc'
import { mdxComponents } from '@/components/docs/mdx-components'

const content = `
# Examples

Explore real-world test examples generated by Arten's AI to learn best practices and common patterns.

## Authentication Tests

### Login Flow

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('User Authentication', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/login')
  })

  test('should login with valid credentials', async ({ page }) => {
    await page.fill('[data-testid="email"]', 'user@example.com')
    await page.fill('[data-testid="password"]', 'password123')
    
    await page.click('[data-testid="login-button"]')
    
    await expect(page).toHaveURL('/dashboard')
    await expect(page.locator('[data-testid="user-menu"]')).toBeVisible()
    await expect(page.locator('[data-testid="welcome-message"]'))
      .toContainText('Welcome back')
  })

  test('should show error for invalid credentials', async ({ page }) => {
    await page.fill('[data-testid="email"]', 'user@example.com')
    await page.fill('[data-testid="password"]', 'wrongpassword')
    
    await page.click('[data-testid="login-button"]')
    
    await expect(page.locator('[data-testid="error-message"]'))
      .toHaveText('Invalid email or password')
    await expect(page).toHaveURL('/login')
  })

  test('should validate required fields', async ({ page }) => {
    await page.click('[data-testid="login-button"]')
    
    await expect(page.locator('[data-testid="email-error"]'))
      .toHaveText('Email is required')
    await expect(page.locator('[data-testid="password-error"]'))
      .toHaveText('Password is required')
  })
})
\`\`\`

### Registration with Email Verification

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('User Registration', () => {
  test('should complete registration flow', async ({ page }) => {
    await page.goto('/register')
    
    // Fill registration form
    await page.fill('[data-testid="email"]', 'newuser@example.com')
    await page.fill('[data-testid="password"]', 'SecurePass123!')
    await page.fill('[data-testid="confirm-password"]', 'SecurePass123!')
    await page.check('[data-testid="terms-checkbox"]')
    
    // Submit form
    await page.click('[data-testid="register-button"]')
    
    // Verify verification message
    await expect(page.locator('[data-testid="verification-message"]'))
      .toContainText('Please check your email')
    await expect(page).toHaveURL('/verify-email')
    
    // Verify email was sent (mock check)
    await expect(page.locator('[data-testid="email-sent-to"]'))
      .toContainText('newuser@example.com')
  })

  test('should validate password requirements', async ({ page }) => {
    await page.goto('/register')
    
    await page.fill('[data-testid="password"]', 'weak')
    await page.blur('[data-testid="password"]')
    
    await expect(page.locator('[data-testid="password-error"]'))
      .toContainText('Password must be at least 8 characters')
  })
})
\`\`\`

## E-commerce Tests

### Shopping Cart

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Shopping Cart', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/products')
  })

  test('should add items to cart and checkout', async ({ page }) => {
    // Add first item
    await page.click('[data-testid="product-1"] [data-testid="add-to-cart"]')
    await expect(page.locator('[data-testid="cart-count"]')).toHaveText('1')
    
    // Add second item
    await page.click('[data-testid="product-2"] [data-testid="add-to-cart"]')
    await expect(page.locator('[data-testid="cart-count"]')).toHaveText('2')
    
    // Open cart
    await page.click('[data-testid="cart-button"]')
    
    // Verify cart contents
    await expect(page.locator('[data-testid="cart-item"]')).toHaveCount(2)
    await expect(page.locator('[data-testid="cart-total"]')).toContainText('$')
    
    // Proceed to checkout
    await page.click('[data-testid="checkout-button"]')
    await expect(page).toHaveURL('/checkout')
  })

  test('should update item quantities', async ({ page }) => {
    // Add item to cart
    await page.click('[data-testid="product-1"] [data-testid="add-to-cart"]')
    await page.click('[data-testid="cart-button"]')
    
    // Increase quantity
    await page.click('[data-testid="cart-item-1"] [data-testid="increase-qty"]')
    await expect(page.locator('[data-testid="cart-item-1"] [data-testid="quantity"]'))
      .toHaveValue('2')
    
    // Decrease quantity
    await page.click('[data-testid="cart-item-1"] [data-testid="decrease-qty"]')
    await expect(page.locator('[data-testid="cart-item-1"] [data-testid="quantity"]'))
      .toHaveValue('1')
  })

  test('should remove items from cart', async ({ page }) => {
    // Add items
    await page.click('[data-testid="product-1"] [data-testid="add-to-cart"]')
    await page.click('[data-testid="product-2"] [data-testid="add-to-cart"]')
    await page.click('[data-testid="cart-button"]')
    
    // Remove first item
    await page.click('[data-testid="cart-item-1"] [data-testid="remove-item"]')
    
    await expect(page.locator('[data-testid="cart-item"]')).toHaveCount(1)
    await expect(page.locator('[data-testid="cart-count"]')).toHaveText('1')
  })
})
\`\`\`

### Checkout Process

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Checkout Process', () => {
  test.beforeEach(async ({ page, context }) => {
    // Set up cart with items (could use API or storage state)
    await context.addInitScript(() => {
      localStorage.setItem('cart', JSON.stringify([
        { id: 1, name: 'Product 1', price: 29.99, quantity: 1 },
        { id: 2, name: 'Product 2', price: 19.99, quantity: 2 }
      ]))
    })
    await page.goto('/checkout')
  })

  test('should complete full checkout flow', async ({ page }) => {
    // Fill shipping information
    await page.fill('[data-testid="first-name"]', 'John')
    await page.fill('[data-testid="last-name"]', 'Doe')
    await page.fill('[data-testid="address"]', '123 Main St')
    await page.fill('[data-testid="city"]', 'San Francisco')
    await page.selectOption('[data-testid="state"]', 'CA')
    await page.fill('[data-testid="zip-code"]', '94105')
    
    // Continue to payment
    await page.click('[data-testid="continue-to-payment"]')
    
    // Fill payment information
    await page.fill('[data-testid="card-number"]', '4111111111111111')
    await page.fill('[data-testid="expiry-month"]', '12')
    await page.fill('[data-testid="expiry-year"]', '2025')
    await page.fill('[data-testid="cvv"]', '123')
    
    // Review order
    await page.click('[data-testid="review-order"]')
    
    // Verify order summary
    await expect(page.locator('[data-testid="order-item"]')).toHaveCount(2)
    await expect(page.locator('[data-testid="total-amount"]')).toContainText('69.97')
    
    // Complete purchase
    await page.click('[data-testid="place-order"]')
    
    // Verify success
    await expect(page).toHaveURL(/.*\/order-confirmation/)
    await expect(page.locator('[data-testid="success-message"]'))
      .toContainText('Order placed successfully')
    await expect(page.locator('[data-testid="order-number"]')).toBeVisible()
  })

  test('should validate payment information', async ({ page }) => {
    // Skip to payment
    await page.click('[data-testid="continue-to-payment"]')
    
    // Try invalid card number
    await page.fill('[data-testid="card-number"]', '1234')
    await page.blur('[data-testid="card-number"]')
    
    await expect(page.locator('[data-testid="card-error"]'))
      .toContainText('Invalid card number')
  })
})
\`\`\`

## Form Testing

### Contact Form with File Upload

\`\`\`typescript
import { test, expect } from '@playwright/test'
import path from 'path'

test.describe('Contact Form', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/contact')
  })

  test('should submit contact form with attachment', async ({ page }) => {
    // Fill form fields
    await page.fill('[data-testid="name"]', 'John Doe')
    await page.fill('[data-testid="email"]', 'john@example.com')
    await page.selectOption('[data-testid="subject"]', 'support')
    await page.fill('[data-testid="message"]', 'I need help with my account.')
    
    // Upload file
    const filePath = path.join(__dirname, 'fixtures', 'test-document.pdf')
    await page.setInputFiles('[data-testid="attachment"]', filePath)
    
    // Verify file upload
    await expect(page.locator('[data-testid="file-name"]'))
      .toContainText('test-document.pdf')
    
    // Submit form
    await page.click('[data-testid="submit-form"]')
    
    // Verify success
    await expect(page.locator('[data-testid="success-message"]'))
      .toContainText('Message sent successfully')
    
    // Verify form reset
    await expect(page.locator('[data-testid="name"]')).toHaveValue('')
  })

  test('should validate file upload size', async ({ page }) => {
    // Try to upload large file (mock)
    const largePath = path.join(__dirname, 'fixtures', 'large-file.pdf')
    await page.setInputFiles('[data-testid="attachment"]', largePath)
    
    await expect(page.locator('[data-testid="file-error"]'))
      .toContainText('File size must be less than 5MB')
  })
})
\`\`\`

## Search and Filtering

### Product Search

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Product Search', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/products')
  })

  test('should search and filter products', async ({ page }) => {
    // Perform search
    await page.fill('[data-testid="search-input"]', 'laptop')
    await page.press('[data-testid="search-input"]', 'Enter')
    
    // Wait for results
    await page.waitForSelector('[data-testid="search-results"]')
    
    // Apply price filter
    await page.fill('[data-testid="min-price"]', '500')
    await page.fill('[data-testid="max-price"]', '1500')
    await page.click('[data-testid="apply-filters"]')
    
    // Apply category filter
    await page.check('[data-testid="category-electronics"]')
    
    // Verify filtered results
    await expect(page.locator('[data-testid="product-card"]')).toHaveCount(5)
    await expect(page.locator('[data-testid="results-count"]'))
      .toContainText('5 results')
    
    // Verify all results contain search term
    const productTitles = page.locator('[data-testid="product-title"]')
    await expect(productTitles.first()).toContainText('laptop', { ignoreCase: true })
  })

  test('should handle no search results', async ({ page }) => {
    await page.fill('[data-testid="search-input"]', 'nonexistentproduct')
    await page.press('[data-testid="search-input"]', 'Enter')
    
    await expect(page.locator('[data-testid="no-results"]'))
      .toContainText('No products found')
    await expect(page.locator('[data-testid="suggestions"]')).toBeVisible()
  })

  test('should clear filters', async ({ page }) => {
    // Apply multiple filters
    await page.check('[data-testid="category-electronics"]')
    await page.fill('[data-testid="min-price"]', '100')
    await page.click('[data-testid="apply-filters"]')
    
    // Clear all filters
    await page.click('[data-testid="clear-filters"]')
    
    // Verify filters are cleared
    await expect(page.locator('[data-testid="category-electronics"]')).not.toBeChecked()
    await expect(page.locator('[data-testid="min-price"]')).toHaveValue('')
  })
})
\`\`\`

## API Integration Tests

### Data Loading with Error Handling

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Data Loading', () => {
  test('should load dashboard data', async ({ page }) => {
    // Mock successful API response
    await page.route('**/api/dashboard', (route) => {
      route.fulfill({
        json: {
          stats: { users: 1234, revenue: 56789 },
          charts: { sales: [10, 20, 30] }
        }
      })
    })
    
    await page.goto('/dashboard')
    
    // Verify loading state disappears
    await expect(page.locator('[data-testid="loading-spinner"]')).not.toBeVisible()
    
    // Verify data is displayed
    await expect(page.locator('[data-testid="user-count"]')).toContainText('1,234')
    await expect(page.locator('[data-testid="revenue"]')).toContainText('56,789')
  })

  test('should handle API errors gracefully', async ({ page }) => {
    // Mock API error
    await page.route('**/api/dashboard', (route) => {
      route.fulfill({ status: 500, json: { error: 'Server error' } })
    })
    
    await page.goto('/dashboard')
    
    // Verify error state
    await expect(page.locator('[data-testid="error-message"]'))
      .toContainText('Failed to load dashboard data')
    await expect(page.locator('[data-testid="retry-button"]')).toBeVisible()
  })

  test('should retry failed requests', async ({ page }) => {
    let callCount = 0
    
    await page.route('**/api/dashboard', (route) => {
      callCount++
      if (callCount === 1) {
        route.fulfill({ status: 500 })
      } else {
        route.fulfill({ json: { stats: { users: 100 } } })
      }
    })
    
    await page.goto('/dashboard')
    
    // Click retry
    await page.click('[data-testid="retry-button"]')
    
    // Verify success after retry
    await expect(page.locator('[data-testid="user-count"]')).toContainText('100')
  })
})
\`\`\`

## Accessibility Tests

### Keyboard Navigation

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Accessibility', () => {
  test('should support keyboard navigation', async ({ page }) => {
    await page.goto('/navigation')
    
    // Tab through navigation items
    await page.keyboard.press('Tab')
    await expect(page.locator('[data-testid="nav-home"]')).toBeFocused()
    
    await page.keyboard.press('Tab')
    await expect(page.locator('[data-testid="nav-products"]')).toBeFocused()
    
    await page.keyboard.press('Tab')
    await expect(page.locator('[data-testid="nav-about"]')).toBeFocused()
    
    // Test Enter key activation
    await page.keyboard.press('Enter')
    await expect(page).toHaveURL('/about')
  })

  test('should have proper ARIA labels', async ({ page }) => {
    await page.goto('/products')
    
    // Check search has proper label
    await expect(page.locator('[data-testid="search-input"]'))
      .toHaveAttribute('aria-label', 'Search products')
    
    // Check buttons have accessible names
    await expect(page.locator('[data-testid="filter-button"]'))
      .toHaveAttribute('aria-expanded', 'false')
    
    // Test screen reader announcements
    await page.click('[data-testid="filter-button"]')
    await expect(page.locator('[data-testid="filter-button"]'))
      .toHaveAttribute('aria-expanded', 'true')
  })
})
\`\`\`

## Performance Tests

### Page Load Performance

\`\`\`typescript
import { test, expect } from '@playwright/test'

test.describe('Performance', () => {
  test('should load pages within performance budget', async ({ page }) => {
    const startTime = Date.now()
    
    await page.goto('/dashboard')
    await page.waitForSelector('[data-testid="dashboard-content"]')
    
    const loadTime = Date.now() - startTime
    expect(loadTime).toBeLessThan(3000) // 3 second budget
    
    // Check for performance metrics
    const metrics = await page.evaluate(() => performance.getEntriesByType('navigation')[0])
    expect(metrics.loadEventEnd - metrics.loadEventStart).toBeLessThan(1000)
  })

  test('should not make excessive API calls', async ({ page }) => {
    const apiCalls = []
    
    page.on('request', (request) => {
      if (request.url().includes('/api/')) {
        apiCalls.push(request.url())
      }
    })
    
    await page.goto('/dashboard')
    await page.waitForLoadState('networkidle')
    
    // Should not make more than 5 API calls for dashboard
    expect(apiCalls.length).toBeLessThanOrEqual(5)
  })
})
\`\`\`

## Testing Patterns

### Page Object Model

\`\`\`typescript
// page-objects/LoginPage.ts
export class LoginPage {
  constructor(private page: Page) {}

  async goto() {
    await this.page.goto('/login')
  }

  async login(email: string, password: string) {
    await this.page.fill('[data-testid="email"]', email)
    await this.page.fill('[data-testid="password"]', password)
    await this.page.click('[data-testid="login-button"]')
  }

  async expectError(message: string) {
    await expect(this.page.locator('[data-testid="error-message"]'))
      .toHaveText(message)
  }

  async expectSuccess() {
    await expect(this.page).toHaveURL('/dashboard')
  }
}

// Using the page object
test('should login with valid credentials', async ({ page }) => {
  const loginPage = new LoginPage(page)
  
  await loginPage.goto()
  await loginPage.login('user@example.com', 'password123')
  await loginPage.expectSuccess()
})
\`\`\`

These examples demonstrate real-world testing scenarios that you can adapt for your own applications. Each test follows Playwright best practices and includes proper error handling, assertions, and maintainable selector strategies.

## Next Steps

- **[Writing Tests](/guides/writing-tests)** - Learn more testing patterns
- **[AI Test Generation](/guides/ai-test-generation)** - Generate similar tests with AI
- **[Browser Testing](/guides/browser-testing)** - Run these tests across browsers
- **[CI/CD Integration](/guides/cicd)** - Automate these tests in your pipeline
`

export default async function ExamplesPage() {
  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="prose prose-slate dark:prose-invert max-w-none">
        <MDXRemote source={content} components={mdxComponents} />
      </div>
    </div>
  )
} 